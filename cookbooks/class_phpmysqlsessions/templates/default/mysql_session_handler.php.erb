<?php

// MySQL PHP session handler
// Stores session information into a database to be shared across the web server cluster.

if(php_sapi_name() == "cli") {
	// use normal session handler for cli
	@ini_set("session.save_handler","files");
	@ini_set("session.save_path","/tmp");
	@ini_set("session.use_cookies","1");
}
else {
	// use mysql session handler for web requests

	// if the server is running on port 443
	// assume that the load balancer will deliver it in https
	if(isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == "443") {
		$_SERVER['HTTPS'] = "on";
	}

	// honor any locks on the directory
	$timeout = ini_get("max_execution_time");
	set_time_limit(0);
	while(file_exists($_SERVER['DOCUMENT_ROOT']."/.lock")) {
		sleep(1);
	}
	set_time_limit($timeout);

	class mysql_session_handler {
		var $database = "<%= node['class_phpmysqlsessions']['database'] %>";
		var $table = "<%= node['class_phpmysqlsessions']['table'] %>";
		var $handle;
		var $compress = true;

		function mysql_session_handler() {
			$this->debug("Initializing session");

			// this needs to be in the constructor
			$this->handle = @mysql_connect("<%= node['class_phpmysqlsessions']['hostname'] %>","<%= node['class_phpmysqlsessions']['username'] %>","<%= node['class_phpmysqlsessions']['password'] %>");

			if(!is_resource($this->handle))
				$this->error("Cannot establish a connection to the database.");

			mysql_select_db($this->database, $this->handle);

			//@mysql_query("SET SESSION wait_timeout=" . ini_get('max_execution_time'), $this->handle);

			// rollback any previously non-committed transactions
			@mysql_query("ROLLBACK", $this->handle);
		}

		/**
		* Creates a new session
		*
		* @param string $save_path Value of session.save_path from php.ini
		* @param string $session_name The session's name
		*
		* @return  boolean True on success, false on failure.
		*/
		function open($save_path, $session_name) {
			$this->debug("Opening the session");
			return is_resource($this->handle);
		}

		/**
		* Close the session
		*
		* @return boolean success or failure
		*/
		function close() {
			$this->debug("Closing the session");
			return @mysql_close($this->handle);
		}

		/**
		* Read session data from the database
		*
		* @param string $session_id Session ID to pull from the DB
		* @return string Serialized session data
		*/
		function read($session_id) {
			$max_lifetime = ini_get("session.gc_maxlifetime");
			$timestamp = time();
			$data = "";

			// start a new transaction
			$result = mysql_query("START TRANSACTION", $this->handle);

			// select using "FOR UPDATE" which should lock the session's row in the database
			// (this also means that InnoDB needs to be used for the php_sessions table)
			$query =
			"SELECT
				`data`
			FROM
				`". mysql_real_escape_string($this->table, $this->handle) ."`
			WHERE
				`session_id` = '". mysql_real_escape_string($session_id, $this->handle) ."' AND
				(
					`last_active` >= FROM_UNIXTIME(". ($timestamp - $max_lifetime) .") OR
					`expiration` >= FROM_UNIXTIME(". $timestamp .")
				)
			FOR UPDATE";

			$result = mysql_query($query, $this->handle)
				or trigger_error(mysql_error($this->handle), E_USER_WARNING);

			if(mysql_num_rows($result) > 0) {
				// grab the data
				$this->debug("Reading from existing session (" . $query . ")");
				$data = mysql_result($result, 0);
				mysql_free_result($result);
			}
			else {
				// session is not in the database so add it
				$query =
				"REPLACE INTO
					`". mysql_real_escape_string($this->table, $this->handle) ."`
					(`session_id`, `ip`, `last_active`, `data`)
				VALUES
					('". mysql_real_escape_string($session_id, $this->handle) ."',INET_ATON('". $_SERVER['REMOTE_ADDR'] ."'),FROM_UNIXTIME(". $timestamp ."),'')";

				$result = mysql_query($query, $this->handle)
					or trigger_error(mysql_error($this->handle), E_USER_WARNING);

				$this->debug("Starting a new session (" . $session_id . ")");
				$data = "";
			}

			if($this->compress && !empty($data) && function_exists("gzinflate")) {
				$data = gzinflate($data);
			}

			return $data;
		}

		/**
		* Writes session data back into the database
		*
		* @param string $session_id ID of the current session
		* @param string $data Serialized session data to store
		* @return boolean success or failure
		*/
		function write($session_id, $data) {
			$cparams = session_get_cookie_params();
			$timestamp = time();
			$expiration = 0;

			// compress the session data (if compression is enabled)
			if($this->compress && function_exists("gzdeflate")) {
				$data = gzdeflate($data);
			}

			// compute the expiration date of the session (if set)
			if(is_numeric($cparams["lifetime"]) && $cparams["lifetime"] != 0) {
				$expiration = $timestamp + $cparams["lifetime"];
			}

			// save the session data
			$query =
			"UPDATE
				`". mysql_real_escape_string($this->table, $this->handle) ."`
			SET
				`last_active`=FROM_UNIXTIME(". $timestamp ."),
				`ip`=INET_ATON('". $_SERVER['REMOTE_ADDR'] ."'),
				`data`='". mysql_real_escape_string($data, $this->handle) ."',
				`expiration`=". ($expiration == 0 ? "NULL" : "FROM_UNIXTIME(" . $expiration . ")") ."
			WHERE
				`session_id`='". mysql_real_escape_string($session_id, $this->handle) ."'";

			$result = mysql_query($query, $this->handle)
				or trigger_error(mysql_error(), E_USER_WARNING);

			if($result) {
				$this->debug("Writing to session (" . $session_id . "): success");
				$result2 = mysql_query("COMMIT", $this->handle);
			}
			else {
				$this->debug("Writing to session (" . $session_id . "): failure");
				$result2 = mysql_query("ROLLBACK", $this->handle);
			}

			return ($result === TRUE);
		}

		/**
		* Deletes a session from the database
		*
		* @param string $session_id ID of the session to delete
		* @return boolean success or failure
		*/
		function destroy($session_id) {
			$retVal = false;

			$query =
			"DELETE FROM
				`". mysql_real_escape_string($this->table, $this->handle) ."`
			WHERE
				`session_id` = '". mysql_real_escape_string($session_id, $this->handle) ."'";

			$result = mysql_query($query, $this->handle)
				or trigger_error(mysql_error($this->handle), E_USER_WARNING);

			if($result && mysql_affected_rows($this->handle) > 0) {
				$result2 = mysql_query("COMMIT", $this->handle)
					or trigger_error(mysql_error($this->handle), E_USER_WARNING);

				if($result2) {
					$retVal = true;
				}
			}

			$this->debug("Destroyed session (" . $query . "): " . ($retVal ? "success" : "failure"));

			return $retVal;
		}

		/**
		* Garbage collection
		* Deletes a session from the database if it has exceeded the max lifetime
		*
		* @param int $max_lifetime Time in seconds required to expire a session
		*
		* @return boolean success or failure
		*/
		function gc($max_lifetime) {
			return true; // using a gc cron job instead
		}

		/**
		* Displays debug messages if the MYSQL_SESSION_HANDLER_DEBUG constant is set
		*
		* @param string $message Debug message to display
		*/
		function debug($message) {
			if(defined("MYSQL_SESSION_HANDLER_DEBUG")) {
				user_error($message, E_USER_WARNING);
			}
		}

		/**
		* Displays a friendly error page
		*
		* @param string $message Error message to display
		*/
		function error($message) {
			header('HTTP/1.1 503 Service Unavailable');

			@include_once("/www/htdocs/crimson/error/header.inc");

			echo '
			<h1 style="font-size: 14pt;">503 Service Unavailable</h1>

			<p style="font-size: 10pt;">
				' . $message . '
			</p>';

			@include_once("/www/htdocs/crimson/error/footer.inc");

			exit(1);
		}

	}

	$session_handler = new mysql_session_handler();

	session_set_save_handler(
		array(&$session_handler, 'open'),
		array(&$session_handler, 'close'),
		array(&$session_handler, 'read'),
		array(&$session_handler, 'write'),
		array(&$session_handler, 'destroy'),
		array(&$session_handler, 'gc')
	);

	register_shutdown_function("session_write_close");

	unset($session_handler);
}

?>
