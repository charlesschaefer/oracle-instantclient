#!/bin/sh

HOME=/var/state/unison
PIDFILE=push-files.pid
LOCALNAMES="`/bin/hostname -s`|`/bin/hostname -f`|`/bin/hostname -i`"
SYNCDIRS="<%= node['clustersync']['sync_dirs'].join(" ") %>"

# make sure a servers.conf file exists
if [ ! -f "/etc/servers.conf" ]; then
  echo "No servers.conf file found!"
  exit 1
fi

# make sure the current server exists in servers.conf
SC=`/bin/egrep -c "^($LOCALNAMES)$" /etc/servers.conf`
if [ "$SC" -eq "0" ]; then
  echo "Current server not found in servers.conf!"
  exit 1
fi

# check for preexisting processes
if [ -f "/var/state/$PIDFILE" ]; then
  PID=`cat /var/state/$PIDFILE`

  if [ -d "/proc/$PID" ]; then
    # another process is already running
    exit
  fi
fi

# acquire a "lock" by setting the pid file
echo "$$" > /var/state/$PIDFILE

# synchronize stuff
for server in `cat /etc/servers.conf`; do
  SC=`echo "$server" | /bin/egrep -c "^($LOCALNAMES)$"`
  if [ "$SC" -eq "0" ]; then
    for dir in $SYNCDIRS; do
      unison -sshargs '-ax -i /root/.ssh/sync_key -o StrictHostKeyChecking=no' -auto -silent -dumbtty -owner -group -logfile /var/log/unison.log $dir/ ssh://$server/$dir/ 2>&1 | grep -v 'Connected \['

      # fallback to rsync if unison fails
      if [ "$?" != "0" ]; then
        rsync -Caz -e 'ssh -ax -i /root/.ssh/sync_key -o StrictHostKeyChecking=no' -q $dir/ $server:$dir/
      fi
    done
  fi
done

# remove the pid file
rm -f /var/state/$PIDFILE

